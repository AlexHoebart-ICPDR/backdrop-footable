<?php

/**
 * @file
 * Provides Views integration for the jQuery FooTable plugin.
 */

define('FOOTABLE_PLUGIN_PATH', 'sites/all/libraries/footable');
define('FOOTABLE_PLUGIN_VERSION_MIN', '3.0.6');
define('FOOTABLE_BREAKPOINT_ENABLED', 1);
define('FOOTABLE_BREAKPOINT_DISABLED', 0);

/**
 * Implements hook_permission().
 */
function footable_permission() {
  return array(
    'administer footable' => array(
      'title' => t('Administer FooTable'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function footable_menu() {
  $items['admin/config/user-interface/footable'] = array(
    'title' => 'FooTable',
    'description' => 'Configure FooTable breakpoints.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('footable_form_admin_breakpoint'),
    'access arguments' => array('administer footable'),
    'file' => 'footable.admin.inc',
  );
  $items['admin/config/user-interface/footable/breakpoint'] = array(
    'title' => 'Breakpoints',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/user-interface/footable/breakpoint/%footable_breakpoint/delete'] = array(
    'title' => 'Delete breakpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('footable_form_admin_breakpoint_delete', 5),
    'access arguments' => array('administer footable'),
    'file' => 'footable.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/footable/breakpoint/%footable_breakpoint/enable'] = array(
    'title' => 'Enable breakpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('footable_form_admin_breakpoint_status_enable', 5),
    'access arguments' => array('administer footable'),
    'file' => 'footable.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/footable/breakpoint/%footable_breakpoint/disable'] = array(
    'title' => 'Disable breakpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('footable_form_admin_breakpoint_status_disable', 5),
    'access arguments' => array('administer footable'),
    'file' => 'footable.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/footable/breakpoint/%footable_breakpoint/export'] = array(
    'title' => 'Export breakpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('footable_form_admin_breakpoint_export', 5),
    'access arguments' => array('administer footable'),
    'file' => 'footable.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/footable/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure FooTable settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('footable_form_admin_settings'),
    'access arguments' => array('administer footable'),
    'file' => 'footable.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function footable_theme($existing, $type, $theme, $path) {
  return array(
    'footable' => array(
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'attributes' => NULL,
        'caption' => NULL,
        'breakpoints' => array(),
        'expand_first' => FALSE,
        'show_header' => TRUE,
        'toggle_column' => 'first',
      ),
    ),
    'footable_form_admin_breakpoint' => array(
      'render element' => 'form',
      'file' => 'footable.admin.inc',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function footable_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'footable') . '/views',
  );
}

/**
 * Implements hook_jqmulti_files().
 */
function footable_jqmulti_files() {
  return array(
    drupal_get_path('module', 'footable') . '/footable.js',
  );
}

/**
 * Implements hook_jqmulti_libraries().
 */
function footable_jqmulti_libraries() {
  return array(
    'footable',
  );
}

/**
 * Implements hook_libraries_info().
 */
function footable_libraries_info() {
  $libraries['footable'] = array(
    'name' => 'FooTable',
    'vendor url' => 'https://github.com/fooplugins/FooTable',
    'download url' => 'https://github.com/fooplugins/FooTable/tags',
    'version arguments' => array(
      'file' => 'footable.min.js',
      // FooTable 3.0.x.
      'pattern' => '#version ([0-9\.a-z]+)#',
      'lines' => 10,
    ),
    'variants' => array(
      'standalone_source' => array(
        'files' => array(
          'js' => array('footable.js'),
          'css' => array('footable.standalone.css'),
        ),
      ),
      'standalone_minified' => array(
        'files' => array(
          'js' => array('footable.min.js'),
          'css' => array('footable.standalone.min.css'),
        ),
      ),
      'bootstrap_source' => array(
        'files' => array(
          'js' => array('footable.js'),
          'css' => array('footable.bootstrap.css'),
        ),
      ),
      'bootstrap_minified' => array(
        'files' => array(
          'js' => array('footable.min.js'),
          'css' => array('footable.bootstrap.min.css'),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Load the FooTable library.
 *
 * @see libraries_load()
 */
function footable_libraries_load() {
  $type = variable_get('footable_plugin_type', 'standalone');
  $compression = variable_get('footable_plugin_compression', 'minified');
  libraries_load('footable', $type . '_' . $compression);
}

/**
 * Returns HTML for a table.
 *
 * @param $variables
 *   An associative array containing:
 *   - header: An array containing the table headers. Each element of the array
 *     can be either a localized string or an associative array with the
 *     following keys:
 *     - "data": The localized title of the table column.
 *     - "field": The database field represented in the table column (required
 *       if user is to be able to sort on this column).
 *     - "sort": A default sort order for this column ("asc" or "desc"). Only
 *       one column should be given a default sort order because table sorting
 *       only applies to one column at a time.
 *     - "breakpoints": An array containing FooTable breakpoint machine names
 *       at which point this column should be hidden.
 *     - Any HTML attributes, such as "colspan", to apply to the column header
 *       cell.
 *   - rows: An array of table rows. Every row is an array of cells, or an
 *     associative array with the following keys:
 *     - "data": an array of cells
 *     - Any HTML attributes, such as "class", to apply to the table row.
 *     - "no_striping": a boolean indicating that the row should receive no
 *       'even / odd' styling. Defaults to FALSE.
 *     Each cell can be either a string or an associative array with the
 *     following keys:
 *     - "data": The string to display in the table cell.
 *     - "header": Indicates this cell is a header.
 *     - Any HTML attributes, such as "colspan", to apply to the table cell.
 *     Here's an example for $rows:
 *     @code
 *     $rows = array(
 *       // Simple row
 *       array(
 *         'Cell 1', 'Cell 2', 'Cell 3'
 *       ),
 *       // Row with attributes on the row and some of its cells.
 *       array(
 *         'data' => array('Cell 1', array('data' => 'Cell 2', 'colspan' => 2)), 'class' => array('funky')
 *       )
 *     );
 *     @endcode
 *   - attributes: An array of HTML attributes to apply to the table tag.
 *   - caption: A localized string to use for the <caption> tag.
 *   - colgroups: An array of column groups. Each element of the array can be
 *     either:
 *     - An array of columns, each of which is an associative array of HTML
 *       attributes applied to the COL element.
 *     - An array of attributes applied to the COLGROUP element, which must
 *       include a "data" attribute. To add attributes to COL elements, set the
 *       "data" attribute with an array of columns, each of which is an
 *       associative array of HTML attributes.
 *     Here's an example for $colgroup:
 *     @code
 *     $colgroup = array(
 *       // COLGROUP with one COL element.
 *       array(
 *         array(
 *           'class' => array('funky'), // Attribute for the COL element.
 *         ),
 *       ),
 *       // Colgroup with attributes and inner COL elements.
 *       array(
 *         'data' => array(
 *           array(
 *             'class' => array('funky'), // Attribute for the COL element.
 *           ),
 *         ),
 *         'class' => array('jazzy'), // Attribute for the COLGROUP element.
 *       ),
 *     );
 *     @endcode
 *     These optional tags are used to group and set properties on columns
 *     within a table. For example, one may easily group three columns and
 *     apply same background style to all.
 *   - sticky: Use a "sticky" table header.
 *   - empty: The message to display in an extra row if table does not have any
 *     rows.
 *   - breakpoints: A keyed array of breakpoints. Each key represents the name
 *     of a breakpoint, used the the column headers. The values are integers
 *     containing the breakpoint in pixels. If this value is left empty, all
 *     enabled FooTable breakpoints will be used.
 *   - expand_first: Whether or not to expand the first rows details.
 *   - show_header: Whether or not to display a header row in the table.
 *   - toggle_column: Specify which column the toggle is appended to in a row
 *     ("first" or "last").
 *
 * @return string
 *   An HTML string representing the FooTable table.
 *
 * @see theme_table()
 */
function theme_footable($variables) {
  // Add FooTable class
  if (empty($variables['attributes']['class']) || !in_array('footable', $variables['attributes']['class'])) {
    $variables['attributes']['class'][] = 'footable';
  }

  // Breakpoints
  if (empty($variables['breakpoints'])) {
    $variables['breakpoints'] = array();
    foreach (footable_breakpoint_load_multiple(array(), FOOTABLE_BREAKPOINT_ENABLED) as $breakpoint) {
      $variables['breakpoints'][$breakpoint->machine_name] = (int) $breakpoint->breakpoint;
    }
  }
  $variables['attributes']['data-breakpoints'] = drupal_json_encode($variables['breakpoints']);

  // Expand first row.
  $variables['attributes']['data-expand-first'] = $variables['expand_first'] ? 'true' : 'false';

  // Show header.
  $variables['attributes']['data-show-header'] = $variables['show_header'] ? 'true' : 'false';

  // Expandable column.
  $variables['attributes']['data-toggle-column'] = $variables['toggle_column'];

  foreach ($variables['header'] as &$cell) {
    if (!is_array($cell)) {
      $cell = array('data' => $cell);
    }

    // Add datatype
    if (empty($cell['data-type'])) {
      $cell['data-type'] = 'html';
    }

    // Add breakpoints
    if (!empty($cell['breakpoints']) && empty($cell['data-breakpoints'])) {
      $cell['data-breakpoints'] = implode(' ', $cell['breakpoints']);
    }
  }

  footable_libraries_load();
  drupal_add_js(drupal_get_path('module', 'footable') . '/footable.js');
  return theme('table', $variables);
}

/**
 * Display a view as a FooTable style.
 *
 * @see template_preprocess_views_view_table()
 */
function template_preprocess_footable_view(&$vars) {
  $view = $vars['view'];

  // We need the raw data for this grouping, which is passed in as
  // $vars['rows']. However, the template also needs to use for the rendered
  // fields. We therefore swap the raw data out to a new variable and reset
  // $vars['rows'] so that it can get rebuilt. Store rows so that they may be
  // used by further preprocess functions.
  $result = $vars['result'] = $vars['rows'];
  $vars['rows'] = array();
  $vars['field_classes'] = array();
  $vars['header'] = array();

  $options = $view->style_plugin->options;
  $handler = $view->style_plugin;

  $row_class_special = isset($options['row_class_special']) ? $options['row_class_special'] : TRUE;

  $fields = &$view->field;
  $columns = $handler->sanitize_columns($options['columns'], $fields);

  $active = !empty($handler->active) ? $handler->active : '';
  $order = !empty($handler->order) ? $handler->order : 'asc';

  $query = tablesort_get_query_parameters();
  if (isset($view->exposed_raw_input)) {
    $query += $view->exposed_raw_input;
  }

  // Fields must be rendered in order as of Views 2.3, so we will pre-render
  // everything.
  $renders = $handler->render_fields($result);

  foreach ($columns as $field => $column) {
    $vars['column_attributes'][$column] = array(
      'data-type' => 'html',
    );

    // Set columns to be hidden by FooTable plugin.
    if (!empty($options['footable']['breakpoint'][$column])) {
      // Breakpoint names are in the array keys, so false values need to be
      // filtered out, then the array_keys will be imploded.
      $vars['column_attributes'][$column]['data-breakpoints'] = implode(' ', array_keys(array_filter($options['footable']['breakpoint'][$column])));
    }

    // Create a second variable so we can easily find what fields we have and
    // what the CSS classes should be.
    $vars['fields'][$field] = drupal_clean_css_identifier($field);
    if ($active == $field) {
      $vars['fields'][$field] .= ' active';
    }

    // Render the header labels.
    if ($field == $column && empty($fields[$field]->options['exclude'])) {
      $label = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');
      if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
        $vars['header'][$field] = $label;
      }
      else {
        $initial = !empty($options['info'][$field]['default_sort_order']) ? $options['info'][$field]['default_sort_order'] : 'asc';

        if ($active == $field) {
          $initial = ($order == 'asc') ? 'desc' : 'asc';
        }

        $title = t('sort by @s', array('@s' => $label));
        if ($active == $field) {
          $label .= theme('tablesort_indicator', array('style' => $initial));
        }

        $query['order'] = $field;
        $query['sort'] = $initial;
        $link_options = array(
          'html' => TRUE,
          'attributes' => array('title' => $title),
          'query' => $query,
        );
        $vars['header'][$field] = l($label, $_GET['q'], $link_options);
      }

      $vars['header_classes'][$field] = '';
      // Set up the header label class.
      if ($fields[$field]->options['element_default_classes']) {
        $vars['header_classes'][$field] .= "views-field views-field-" . $vars['fields'][$field];
      }
      $class = $fields[$field]->element_label_classes(0);
      if ($class) {
        if ($vars['header_classes'][$field]) {
          $vars['header_classes'][$field] .= ' ';
        }
        $vars['header_classes'][$field] .= $class;
      }
      // Add a CSS align class to each field if one was set.
      if (!empty($options['info'][$field]['align'])) {
        $vars['header_classes'][$field] .= ' ' . drupal_clean_css_identifier($options['info'][$field]['align']);
      }

      // Add a header label wrapper if one was selected.
      if ($vars['header'][$field]) {
        $element_label_type = $fields[$field]->element_label_type(TRUE, TRUE);
        if ($element_label_type) {
          $vars['header'][$field] = '<' . $element_label_type . '>' . $vars['header'][$field] . '</' . $element_label_type . '>';
        }
      }
    }

    // Add a CSS align class to each field if one was set.
    if (!empty($options['info'][$field]['align'])) {
      $vars['fields'][$field] .= ' ' . drupal_clean_css_identifier($options['info'][$field]['align']);
    }

    // Render each field into its appropriate column.
    foreach ($result as $num => $row) {
      // Add field classes
      $vars['field_classes'][$field][$num] = '';
      if ($fields[$field]->options['element_default_classes']) {
        $vars['field_classes'][$field][$num] = "views-field views-field-" . $vars['fields'][$field];
      }
      if ($classes = $fields[$field]->element_classes($num)) {
        if ($vars['field_classes'][$field][$num]) {
          $vars['field_classes'][$field][$num] .= ' ';
        }

        $vars['field_classes'][$field][$num] .= $classes;
      }
      $vars['field_attributes'][$field][$num] = array();

      if (!empty($fields[$field]) && empty($fields[$field]->options['exclude'])) {
        $field_output = $renders[$num][$field];
        $element_type = $fields[$field]->element_type(TRUE, TRUE);
        if ($element_type) {
          $field_output = '<' . $element_type . '>' . $field_output . '</' . $element_type . '>';
        }

        // Don't bother with separators and stuff if the field does not show up.
        if (empty($field_output) && !empty($vars['rows'][$num][$column])) {
          continue;
        }

        // Place the field into the column, along with an optional separator.
        if (!empty($vars['rows'][$num][$column])) {
          if (!empty($options['info'][$column]['separator'])) {
            $vars['rows'][$num][$column] .= filter_xss_admin($options['info'][$column]['separator']);
          }
        }
        else {
          $vars['rows'][$num][$column] = '';
        }

        $vars['rows'][$num][$column] .= $field_output;
      }
    }

    // Remove columns if the option is breakpoint empty column is checked and
    // the field is not empty.
    if (!empty($options['info'][$field]['empty_column'])) {
      $empty = TRUE;
      foreach ($vars['rows'] as $num => $columns) {
        $empty &= empty($columns[$column]);
      }
      if ($empty) {
        foreach ($vars['rows'] as $num => &$column_items) {
          unset($column_items[$column]);
          unset($vars['header'][$column]);
        }
      }
    }
  }

  // Hide table header if all labels are empty.
  if (!array_filter($vars['header'])) {
    $vars['header'] = array();
  }

  $count = 0;
  foreach ($vars['rows'] as $num => $row) {
    $vars['row_classes'][$num] = array();
    if ($row_class_special) {
      $vars['row_classes'][$num][] = ($count++ % 2 == 0) ? 'odd' : 'even';
    }
    if ($row_class = $handler->get_row_class($num)) {
      $vars['row_classes'][$num][] = $row_class;
    }
  }

  if ($row_class_special) {
    $vars['row_classes'][0][] = 'views-row-first';
    $vars['row_classes'][count($vars['row_classes']) - 1][] = 'views-row-last';
  }

  $vars['classes_array'] = array('views-table');
  if (empty($vars['rows']) && !empty($options['empty_table'])) {
    $vars['rows'][0][0] = $view->display_handler->render_area('empty');
    // Calculate the amounts of rows with output.
    $vars['field_attributes'][0][0]['colspan'] = count($vars['header']);
    $vars['field_classes'][0][0] = 'views-empty';
  }


  if (!empty($options['sticky'])) {
    drupal_add_js('misc/tableheader.js');
    $vars['classes_array'][] = "sticky-enabled";
  }
  $vars['classes_array'][] = 'cols-' . count($vars['header']);

  // Add the summary to the list if set.
  if (!empty($handler->options['summary'])) {
    $vars['attributes_array'] = array('summary' => filter_xss_admin($handler->options['summary']));
  }

  // Add the caption to the list if set.
  if (!empty($handler->options['caption'])) {
    $vars['caption'] = filter_xss_admin($handler->options['caption']);
  }
  else {
    $vars['caption'] = '';
  }

  // Add FooTable classes and data attributes.
  $vars['classes_array'][] = 'footable';
  $vars['footable'] = array('attributes' => array(), 'breakpoints' => '');

  // Expand first row.
  $expand_first = isset($options['footable']['expand_first']) ? $options['footable']['expand_first'] : FALSE;
  $vars['footable']['attributes']['data-expand-first'] = $expand_first ? 'true' : 'false';

  // Show header.
  $show_header = isset($options['footable']['show_header']) ? $options['footable']['show_header'] : TRUE;
  $vars['footable']['attributes']['data-show-header'] = $show_header ? 'true' : 'false';

  // Expandable column.
  $vars['footable']['attributes']['data-toggle-column'] = isset($options['footable']['toggle_column']) ? $options['footable']['toggle_column'] : 'first';

  // Add Bootstrap configuration.
  if (variable_get('footable_plugin_type', 'standalone') == 'bootstrap') {
    if (!empty($options['footable']['bootstrap']['striped'])) {
      $vars['classes_array'][] = 'table-striped';
    }

    if (!empty($options['footable']['bootstrap']['bordered'])) {
      $vars['classes_array'][] = 'table-bordered';
    }

    if (!empty($options['footable']['bootstrap']['hover'])) {
      $vars['classes_array'][] = 'table-hover';
    }

    if (!empty($options['footable']['bootstrap']['condensed'])) {
      $vars['classes_array'][] = 'table-condensed';
    }
  }

  $breakpoints = array();
  foreach (footable_breakpoint_load_multiple(array(), FOOTABLE_BREAKPOINT_ENABLED) as $breakpoint) {
    $breakpoints[$breakpoint->machine_name] = (int) $breakpoint->breakpoint;
  }
  $vars['footable']['attributes']['data-breakpoints'] = drupal_json_encode($breakpoints);

  // Add FooTable plugin files and calling script.
  footable_libraries_load();
  drupal_add_js(drupal_get_path('module', 'footable') . '/footable.js');
}

/**
 * Implements hook_ctools_plugin_api().
 */
function footable_ctools_plugin_api($module, $api) {
  if ($module == 'footable' && $api == 'footable_breakpoint') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_default_footable_breakpoint().
 */
function footable_default_footable_breakpoint() {
  $export = array();

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'Extra small devices';
  $breakpoint->machine_name = 'xs';
  $breakpoint->breakpoint = 480;
  $breakpoint->status = 1;
  $breakpoint->weight = 0;
  $export[$breakpoint->machine_name] = $breakpoint;

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'Small devices';
  $breakpoint->machine_name = 'sm';
  $breakpoint->breakpoint = 768;
  $breakpoint->status = 1;
  $breakpoint->weight = 1;
  $export[$breakpoint->machine_name] = $breakpoint;

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'Medium devices';
  $breakpoint->machine_name = 'md';
  $breakpoint->breakpoint = 992;
  $breakpoint->status = 1;
  $breakpoint->weight = 2;
  $export[$breakpoint->machine_name] = $breakpoint;

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'Large devices';
  $breakpoint->machine_name = 'lg';
  $breakpoint->breakpoint = 1200;
  $breakpoint->status = 1;
  $breakpoint->weight = 3;
  $export[$breakpoint->machine_name] = $breakpoint;

  return $export;
}

/**
 * Returns the maximum weight of all the FooTable breakpoints.
 *
 * @return int
 *   Current maximum weight.
 */
function footable_breakpoint_max_weight() {
  $query = db_select('footable_breakpoint');
  $query->addExpression('MAX(weight)');
  $weight = $query->execute()->fetchField();
  return $weight ? $weight : 0;
}

/**
 * Sort footable breakpoint by weight.
 */
function footable_breakpoint_sort($a, $b) {
  $a_weight = !empty($a->weight) ? $a->weight : 0;
  $b_weight = !empty($b->weight) ? $b->weight : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Returns a list of FooTable breakpoints filtered by machine name, including
 * or excluding the default FooTable breakpoints (All / Default).
 *
 * @param bool $default
 *   Include the default FooTable breakpoints (All / Default).
 * @param int $status
 *   Only load enabled or disabled breakpoints.
 *
 * @return array
 *   List of loaded FooTable breakpoints.
 */
function footable_breakpoint_load_all($default = FALSE, $status = NULL) {
  $breakpoints = footable_breakpoint_load_multiple(array(), $status);

  if ($default) {
    $breakpoints['all'] = (object) array(
      'name' => 'All',
      'machine_name' => 'all',
      'breakpoint' => 'all',
      'weight' => -100,
    );
    $breakpoints['default'] = (object) array(
      'name' => 'Default',
      'machine_name' => 'default',
      'breakpoint' => 'default',
      'weight' => 100,
    );
  }

  drupal_alter('footable_breakpoint_load_all', $breakpoints);
  uasort($breakpoints, 'footable_breakpoint_sort');
  return $breakpoints;
}

/**
 * Returns a list of FooTable breakpoints filtered by machine name.
 *
 * @param array $machine_names
 *   List of machines names to filter by or an empty array to load all
 *   breakpoints.
 * @param int $status
 *   Only load enabled or disabled breakpoints.
 *
 * @return array
 *   List of loaded FooTable breakpoints.
 */
function footable_breakpoint_load_multiple($machine_names = array(), $status = NULL) {
  ctools_include('export');
  $breakpoints = empty($machine_names) ? ctools_export_load_object('footable_breakpoint') : ctools_export_load_object('footable_breakpoint', 'names', $machine_names);
  drupal_alter('footable_breakpoint_load', $breakpoints);

  if (isset($status)) {
    foreach ($breakpoints as $machine_name => $breakpoint) {
      if ($breakpoint->status != $status) {
        unset($breakpoints[$machine_name]);
      }
    }
  }

  uasort($breakpoints, 'footable_breakpoint_sort');
  return $breakpoints;
}

/**
 * Load a single FooTable breakpoint by machine name.
 *
 * @param string $machine_name
 *   The breakpoint machine name.
 *
 * @return bool|object
 *   The breakpoint configuration, or FALSE if no matching breakpoint was found.
 */
function footable_breakpoint_load($machine_name) {
  $breakpoints = footable_breakpoint_load_multiple(array($machine_name));
  if (isset($breakpoints[$machine_name])) {
    return $breakpoints[$machine_name];
  }
  return FALSE;
}

/**
 * Save a breakpoint.
 *
 * @param object $breakpoint
 *   FooTable breakpoint object to save to the database. A new breakpoint will
 *   be created if $breakpoint->is_new is set to TRUE, otherwise the breakpoint
 *   will be updated.
 *
 * @return bool|int
 *   If the record insert or update failed, returns FALSE. If it succeeded,
 *   returns SAVED_NEW or SAVED_UPDATED, depending on the operation performed.
 */
function footable_breakpoint_save($breakpoint) {
  $update = !empty($breakpoint->is_new) || !empty($breakpoint->in_code_only) ? array() : 'machine_name';
  $result = drupal_write_record('footable_breakpoint', $breakpoint, $update);
  ctools_include('export');
  ctools_export_load_object_reset('footable_breakpoint');
  return $result;
}

/**
 * Delete a single breakpoint by machine name.
 *
 * @param string $machine_name
 *   The breakpoint machine name.
 */
function footable_breakpoint_delete($machine_name) {
  db_delete('footable_breakpoint')
    ->condition('machine_name', $machine_name)
    ->execute();
  ctools_include('export');
  ctools_export_load_object_reset('footable_breakpoint');
}
