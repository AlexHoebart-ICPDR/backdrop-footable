<?php

/**
 * @file
 * Provides Views integration for the jQuery FooTable plugin.
 */

define('FOOTABLE_PLUGIN_PATH', 'sites/all/libraries/footable');

define('FOOTABLE_PLUGIN_VERSION_MIN', '3.0.6');

/**
 * Implements hook_libraries_info().
 */
function footable_libraries_info() {
  $libraries['footable'] = array(
    'name' => 'FooTable',
    'vendor url' => 'https://github.com/fooplugins/FooTable',
    'download url' => 'https://github.com/fooplugins/FooTable/tags',
    'version arguments' => array(
      'file' => 'footable.min.js',
      // FooTable 3.0.x
      'pattern' => '#version ([0-9\.a-z]+)#',
      'lines' => 10,
    ),
    'variants' => array(
      'standalone_source' => array(
        'files' => array(
          'js' => array('footable.js'),
          'css' => array('footable.standalone.css'),
        ),
      ),
      'standalone_minified' => array(
        'files' => array(
          'js' => array('footable.min.js'),
          'css' => array('footable.standalone.min.css'),
        ),
      ),
      'bootstrap_source' => array(
        'files' => array(
          'js' => array('footable.js'),
          'css' => array('footable.bootstrap.css'),
        ),
      ),
      'bootstrap_minified' => array(
        'files' => array(
          'js' => array('footable.min.js'),
          'css' => array('footable.bootstrap.min.css'),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_views_api().
 */
function footable_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'footable') . '/views',
  );
}

/**
 * Implements hook_jqmulti_files().
 */
function footable_jqmulti_files() {
  return array(
    'path' => drupal_get_path('module', 'footable') . '/js/caller.js',
  );
}

/**
 * Implements hook_jqmulti_libraries().
 */
function footable_jqmulti_libraries() {
  return array(
    'FooTable',
  );
}

/**
 * Display a view as a FooTable style.
 */
function template_preprocess_footable_view(&$vars) {
  $view = $vars['view'];

  // We need the raw data for this grouping, which is passed in as $vars['rows'].
  // However, the template also needs to use for the rendered fields.  We
  // therefore swap the raw data out to a new variable and reset $vars['rows']
  // so that it can get rebuilt.
  // Store rows so that they may be used by further preprocess functions.
  $result = $vars['result'] = $vars['rows'];
  $vars['rows'] = array();
  $vars['field_classes'] = array();
  $vars['header'] = array();

  $options = $view->style_plugin->options;
  $handler = $view->style_plugin;

  $default_row_class = isset($options['default_row_class']) ? $options['default_row_class'] : TRUE;
  $row_class_special = isset($options['row_class_special']) ? $options['row_class_special'] : TRUE;

  $fields = &$view->field;
  $columns = $handler->sanitize_columns($options['columns'], $fields);

  $active = !empty($handler->active) ? $handler->active : '';
  $order = !empty($handler->order) ? $handler->order : 'asc';

  $query = tablesort_get_query_parameters();
  if (isset($view->exposed_raw_input)) {
    $query += $view->exposed_raw_input;
  }

  // Fields must be rendered in order as of Views 2.3, so we will pre-render
  // everything.
  $renders = $handler->render_fields($result);

  foreach ($columns as $field => $column) {
    // Set columns to be hidden by FooTable plugin.
    if (!empty($options['footable']['hide'][$column])) {
      // Breakpoint names are in the array keys, so false values need to be
      // filtered out, then the array_keys imploded.
      $vars['data_hide'][$column] = implode(',', array_keys(array_filter($options['footable']['hide'][$column])));
    }

    // Create a second variable so we can easily find what fields we have and what the
    // CSS classes should be.
    $vars['fields'][$field] = drupal_clean_css_identifier($field);
    if ($active == $field) {
      $vars['fields'][$field] .= ' active';
    }

    // render the header labels
    if ($field == $column && empty($fields[$field]->options['exclude'])) {
      $label = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');
      if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
        $vars['header'][$field] = $label;
      }
      else {
        $initial = !empty($options['info'][$field]['default_sort_order']) ? $options['info'][$field]['default_sort_order'] : 'asc';

        if ($active == $field) {
          $initial = ($order == 'asc') ? 'desc' : 'asc';
        }

        $title = t('sort by @s', array('@s' => $label));
        if ($active == $field) {
          $label .= theme('tablesort_indicator', array('style' => $initial));
        }

        $query['order'] = $field;
        $query['sort'] = $initial;
        $link_options = array(
          'html' => TRUE,
          'attributes' => array('title' => $title),
          'query' => $query,
        );
        $vars['header'][$field] = l($label, $_GET['q'], $link_options);
      }

      $vars['header_classes'][$field] = '';
      // Set up the header label class.
      if ($fields[$field]->options['element_default_classes']) {
        $vars['header_classes'][$field] .= "views-field views-field-" . $vars['fields'][$field];
      }
      $class = $fields[$field]->element_label_classes(0);
      if ($class) {
        if ($vars['header_classes'][$field]) {
          $vars['header_classes'][$field] .= ' ';
        }
        $vars['header_classes'][$field] .= $class;
      }
      // Add a CSS align class to each field if one was set
      if (!empty($options['info'][$field]['align'])) {
        $vars['header_classes'][$field] .= ' ' . drupal_clean_css_identifier($options['info'][$field]['align']);
      }

      // Add a header label wrapper if one was selected.
      if ($vars['header'][$field]) {
        $element_label_type = $fields[$field]->element_label_type(TRUE, TRUE);
        if ($element_label_type) {
          $vars['header'][$field] = '<' . $element_label_type . '>' . $vars['header'][$field] . '</' . $element_label_type . '>';
        }
      }

    }

    // Add a CSS align class to each field if one was set
    if (!empty($options['info'][$field]['align'])) {
      $vars['fields'][$field] .= ' ' . drupal_clean_css_identifier($options['info'][$field]['align']);
    }

    // Render each field into its appropriate column.
    foreach ($result as $num => $row) {
      // Add field classes
      $vars['field_classes'][$field][$num] = '';
      if ($fields[$field]->options['element_default_classes']) {
        $vars['field_classes'][$field][$num] = "views-field views-field-" . $vars['fields'][$field];
      }
      if ($classes = $fields[$field]->element_classes($num)) {
        if ($vars['field_classes'][$field][$num]) {
          $vars['field_classes'][$field][$num] .= ' ';
        }

        $vars['field_classes'][$field][$num] .= $classes;
      }
      $vars['field_attributes'][$field][$num] = array();

      if (!empty($fields[$field]) && empty($fields[$field]->options['exclude'])) {
        $field_output = $renders[$num][$field];
        $element_type = $fields[$field]->element_type(TRUE, TRUE);
        if ($element_type) {
          $field_output = '<' . $element_type . '>' . $field_output . '</' . $element_type . '>';
        }

        // Don't bother with separators and stuff if the field does not show up.
        if (empty($field_output) && !empty($vars['rows'][$num][$column])) {
          continue;
        }

        // Place the field into the column, along with an optional separator.
        if (!empty($vars['rows'][$num][$column])) {
          if (!empty($options['info'][$column]['separator'])) {
            $vars['rows'][$num][$column] .= filter_xss_admin($options['info'][$column]['separator']);
          }
        }
        else {
          $vars['rows'][$num][$column] = '';
        }

        $vars['rows'][$num][$column] .= $field_output;
      }
    }

    // Remove columns if the option is hide empty column is checked and the field is not empty.
    if (!empty($options['info'][$field]['empty_column'])) {
      $empty = TRUE;
      foreach ($vars['rows'] as $num => $columns) {
        $empty &= empty($columns[$column]);
      }
      if ($empty) {
        foreach ($vars['rows'] as $num => &$column_items) {
          unset($column_items[$column]);
          unset($vars['header'][$column]);
        }
      }
    }
  }

  // Hide table header if all labels are empty.
  if (!array_filter($vars['header'])) {
    $vars['header'] = array();
  }

  $count = 0;
  foreach ($vars['rows'] as $num => $row) {
    $vars['row_classes'][$num] = array();
    if ($row_class_special) {
      $vars['row_classes'][$num][] = ($count++ % 2 == 0) ? 'odd' : 'even';
    }
    if ($row_class = $handler->get_row_class($num)) {
      $vars['row_classes'][$num][] = $row_class;
    }
  }

  if ($row_class_special) {
    $vars['row_classes'][0][] = 'views-row-first';
    $vars['row_classes'][count($vars['row_classes']) - 1][] = 'views-row-last';
  }

  $vars['classes_array'] = array('views-table');
  if (empty($vars['rows']) && !empty($options['empty_table'])) {
    $vars['rows'][0][0] = $view->display_handler->render_area('empty');
    // Calculate the amounts of rows with output.
    $vars['field_attributes'][0][0]['colspan'] = count($vars['header']);
    $vars['field_classes'][0][0] = 'views-empty';
  }


  if (!empty($options['sticky'])) {
    drupal_add_js('misc/tableheader.js');
    $vars['classes_array'][] = "sticky-enabled";
  }
  $vars['classes_array'][] = 'cols-' . count($vars['header']);

  // Add the summary to the list if set.
  if (!empty($handler->options['summary'])) {
    $vars['attributes_array'] = array('summary' => filter_xss_admin($handler->options['summary']));
  }

  // Add the caption to the list if set.
  if (!empty($handler->options['caption'])) {
    $vars['caption'] = filter_xss_admin($handler->options['caption']);
  }
  else {
    $vars['caption'] = '';
  }

  // Add FooTable classes and data attributes.
  $vars['classes_array'][] = 'footable';
  if (!empty($options['footable']['expand'])) {
    $vars['data_toggle'][$options['footable']['expand']] = 'true';
  }
  // Toggle icon style
  if (!empty($options['footable']['icon'])) {
    $vars['classes_array'][] = $options['footable']['icon'];
  }
  // Toggle icon style
  if (!empty($options['footable']['icon_size'])) {
    $vars['classes_array'][] = $options['footable']['icon_size'];
  }

  // Add FooTable library files and calling script.
  drupal_add_library('footable', 'footable');
  drupal_add_js(drupal_get_path('module', 'footable') . '/js/caller.js');
}

/**
 * Implements hook_ctools_plugin_api().
 */
function footable_ctools_plugin_api($module, $api) {
  if ($module == 'footable' && $api == 'footable_breakpoint') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_default_footable_breakpoint().
 */
function footable_default_footable_breakpoint() {
  $export = array();

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'Extra small devices';
  $breakpoint->machine_name = 'xs';
  $breakpoint->breakpoint = 480;
  $breakpoint->status = 1;
  $breakpoint->weight = 0;
  $export[$breakpoint->machine_name] = $breakpoint;

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'Small devices';
  $breakpoint->machine_name = 'sm';
  $breakpoint->breakpoint = 768;
  $breakpoint->status = 1;
  $breakpoint->weight = 1;
  $export[$breakpoint->machine_name] = $breakpoint;

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'Medium devices';
  $breakpoint->machine_name = 'md';
  $breakpoint->breakpoint = 992;
  $breakpoint->status = 1;
  $breakpoint->weight = 2;
  $export[$breakpoint->machine_name] = $breakpoint;

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'Large devices';
  $breakpoint->machine_name = 'lg';
  $breakpoint->breakpoint = 1200;
  $breakpoint->status = 1;
  $breakpoint->weight = 3;
  $export[$breakpoint->machine_name] = $breakpoint;

  return $export;
}

/**
 * Returns the maximum weight of all the FooTable breakpoints.
 *
 * @return int
 *   Current maximum weight.
 */
function footable_breakpoint_max_weight() {
  $query = db_select('footable_breakpoint');
  $query->addExpression('MAX(weight)');
  $weight = $query->execute()->fetchField();
  return $weight ? $weight : 0;
}

/**
 * Sort footable breakpoint by weight.
 */
function footable_breakpoint_sort($a, $b) {
  $a_weight = !empty($a->weight) ? $a->weight : 0;
  $b_weight = !empty($b->weight) ? $b->weight : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * @param bool $default
 *   Include the default FooTable breakpoints (All / Default)
 *
 * @return array
 */
function footable_breakpoint_load_all($default = FALSE) {
  $breakpoints = footable_breakpoint_load_multiple();

  if ($default) {
    $breakpoints['all'] = (object) array(
      'name' => 'All',
      'machine_name' => 'all',
      'breakpoint' => 'all',
      'weight' => -100,
    );
    $breakpoints['default'] = (object) array(
      'name' => 'Default',
      'machine_name' => 'default',
      'breakpoint' => 'default',
      'weight' => 100,
    );
  }

  drupal_alter('footable_breakpoint_load_all', $breakpoints);
  uasort($breakpoints, 'footable_breakpoint_sort');
  return $breakpoints;
}

/**
 * Returns a list of breakpoints filtered by machine name.
 *
 * @param array $machine_names
 *   List of machines names to filter by or an empty array to load all
 *   breakpoints
 *
 * @return array
 */
function footable_breakpoint_load_multiple($machine_names = array()) {
  ctools_include('export');
  $breakpoints = empty($machine_names) ? ctools_export_load_object('footable_breakpoint') : ctools_export_load_object('footable_breakpoint', 'names', $machine_names);
  drupal_alter('footable_breakpoint_load', $breakpoints);
  uasort($breakpoints, 'footable_breakpoint_sort');
  return $breakpoints;
}

/**
 * Load a single breakpoint by machine_name.
 *
 * @param $machine_name
 *   The breakpoint machine name.
 *
 * @return bool|object
 *   The breakpoint configuration, or FALSE if no matching breakpoint was found.
 */
function footable_breakpoint_load($machine_name) {
  $breakpoints = footable_breakpoint_load_multiple(array($machine_name));
  if (isset($breakpoints[$machine_name])) {
    return $breakpoints[$machine_name];
  }
  return FALSE;
}

/**
 * Save a breakpoint.
 *
 * @param $breakpoint
 *   Breakpoint object to save to the database. A new breakpoint will be created
 *   if $breakpoint->is_new is set to TRUE, otherwise the breakpoint will be
 *   updated.
 *
 * @return bool|int
 */
function footable_breakpoint_save($breakpoint) {
  $update = !empty($breakpoint->is_new) || !empty($breakpoint->in_code_only) ? array() : 'machine_name';
  $result = drupal_write_record('footable_breakpoint', $breakpoint, $update);
  ctools_include('export');
  ctools_export_load_object_reset('footable_breakpoint');
  return $result;
}

